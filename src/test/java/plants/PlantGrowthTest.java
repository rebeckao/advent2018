package plants;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;

class PlantGrowthTest {
    private PlantGrowth plantGrowth = new PlantGrowth();

    @ParameterizedTest
    @CsvSource({
            "initial state: #..#.#..##......###...###," +
                    "...## => #;" +
                    "..#.. => #;" +
                    ".#... => #;" +
                    ".#.#. => #;" +
                    ".#.## => #;" +
                    ".##.. => #;" +
                    ".#### => #;" +
                    "#.#.# => #;" +
                    "#.### => #;" +
                    "##.#. => #;" +
                    "##.## => #;" +
                    "###.. => #;" +
                    "###.# => #;" +
                    "####. => #," +
                    "20, 325",
            "initial state: ##.##.#.#...#......#..#.###..##...##.#####..#..###.########.##.....#...#...##....##.#...#.###...#.##," +
                    ".###. => #;" +
                    "###.# => #;" +
                    "#..#. => #;" +
                    ".#..# => #;" +
                    "...## => #;" +
                    ".#### => .;" +
                    ".#.## => #;" +
                    "#.... => .;" +
                    "#..## => .;" +
                    "..#.. => .;" +
                    "#.##. => #;" +
                    "##.#. => .;" +
                    "....# => .;" +
                    "#.#.. => #;" +
                    ".#... => #;" +
                    ".##.# => #;" +
                    "..### => .;" +
                    ".##.. => .;" +
                    "##... => #;" +
                    "###.. => #;" +
                    "##..# => #;" +
                    "...#. => .;" +
                    "..#.# => #;" +
                    "..##. => .;" +
                    "#...# => .;" +
                    ".#.#. => #;" +
                    "##### => .;" +
                    "#.#.# => .;" +
                    "####. => #;" +
                    "#.### => .;" +
                    "..... => .;" +
                    "##.## => .," +
                    "20, 3890",
            "initial state: ##.##.#.#...#......#..#.###..##...##.#####..#..###.########.##.....#...#...##....##.#...#.###...#.##," +
                    ".###. => #;" +
                    "###.# => #;" +
                    "#..#. => #;" +
                    ".#..# => #;" +
                    "...## => #;" +
                    ".#### => .;" +
                    ".#.## => #;" +
                    "#.... => .;" +
                    "#..## => .;" +
                    "..#.. => .;" +
                    "#.##. => #;" +
                    "##.#. => .;" +
                    "....# => .;" +
                    "#.#.. => #;" +
                    ".#... => #;" +
                    ".##.# => #;" +
                    "..### => .;" +
                    ".##.. => .;" +
                    "##... => #;" +
                    "###.. => #;" +
                    "##..# => #;" +
                    "...#. => .;" +
                    "..#.# => #;" +
                    "..##. => .;" +
                    "#...# => .;" +
                    ".#.#. => #;" +
                    "##### => .;" +
                    "#.#.# => .;" +
                    "####. => #;" +
                    "#.### => .;" +
                    "..... => .;" +
                    "##.## => .," +
                    "1000, 97087"
    })
    void sumOfPlantIndicesAfterGrowth(String initial, String patterns, int generations, int expected) {
        long actual = plantGrowth.sumOfPlantIndicesAfterGrowth(initial, Set.of(patterns.split(";")), generations);
        assertEquals(expected, actual);
    }

}